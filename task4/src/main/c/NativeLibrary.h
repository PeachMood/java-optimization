/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class NativeLibrary */

#ifndef _Included_NativeLibrary
#define _Included_NativeLibrary
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     NativeLibrary
 * Method:    allocateMemory
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_NativeLibrary_allocateMemory
  (JNIEnv *, jobject);

/*
 * Class:     NativeLibrary
 * Method:    divideByZero
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_NativeLibrary_divideByZero
  (JNIEnv *, jobject);

/*
 * Class:     NativeLibrary
 * Method:    getLength
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_NativeLibrary_getLength
  (JNIEnv *, jobject, jstring);

/*
 * Class:     NativeLibrary
 * Method:    invokeClassMethod
 * Signature: (LTestClass;)I
 */
JNIEXPORT jint JNICALL Java_NativeLibrary_invokeClassMethod
  (JNIEnv *, jobject, jobject);

/*
 * Class:     NativeLibrary
 * Method:    setClassField
 * Signature: (LTestClass;I)V
 */
JNIEXPORT void JNICALL Java_NativeLibrary_setClassField
  (JNIEnv *, jobject, jobject, jint);

/*
 * Class:     NativeLibrary
 * Method:    allocateStructure
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_NativeLibrary_allocateStructure
  (JNIEnv *, jobject);

/*
 * Class:     NativeLibrary
 * Method:    getStructureField
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_NativeLibrary_getStructureField
  (JNIEnv *, jobject, jlong);

/*
 * Class:     NativeLibrary
 * Method:    freeMemory
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_NativeLibrary_freeMemory
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
